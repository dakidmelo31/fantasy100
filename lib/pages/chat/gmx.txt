import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:hospital/providers/data_manager.dart';
import 'package:intl/intl.dart';

import '../../utils/globals.dart';

class GeminiScreen extends StatefulWidget {
  GeminiScreen(this.chat);

  final Chat chat;

  @override
  State<GeminiScreen> createState() => _GeminiScreenState();
}

class _GeminiScreenState extends State<GeminiScreen>
    with TickerProviderStateMixin {
  late final TextEditingController _msgController;
  List<Message> messages = [];

  bool _loading = false;
  generate() async {
    setState(() {
      _loading = true;
    });
    const apiKey = Globals.gemini;
    // For text-only input, use the gemini-pro model
    final model = GenerativeModel(model: 'gemini-pro', apiKey: apiKey);
    if (_msgController.text.trim().isNotEmpty) {
      final content = [Content.text(_msgController.text.trim())];
      Message me = Message(
          isCurrentUser: true,
          content: _msgController.text.trim(),
          sentAt: DateTime.now());
      messages.add(me);
      GeminiManager().insertMsg(_msgController.text.trim(), isMe: 1);

      setState(() {
        _msgController.text = "";
      });
      final response = await model.generateContent(content);

      Message gmn = Message(
          isCurrentUser: !true,
          content: response.text.toString(),
          sentAt: DateTime.now());

      GeminiManager().insertMsg(gmn.content.toString().trim(), isMe: 0);

      messages.add(gmn);
      debugPrint(gmn.content);
    } else {
      toast(message: "Don't send empty text");
    }
    messages = await GeminiManager().loadChats();
    setState(() {
      _loading = false;
    });

    // Globals.toast(response.text.toString());
  }

  getMsg() {
    GeminiManager().loadChats();
  }

  late AnimationController _animationController;
  late Animation<double> _slideAnimation;

  @override
  void initState() {
    getMsg();
    super.initState();
    _msgController = TextEditingController();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _slideAnimation = Tween<double>(begin: 0, end: 1).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Widget modText(var text) {
    List<String> data = text.split("**");

    List<Widget> result = [];
    for (int i = 0; i < data.length - 1; i++) {
      String item = data[i];
      item = item.trim();
      if (item.isEmpty) {
        continue;
      } else if (i != 0 && i % 2 == 0) {
        result.add(Padding(
          padding: const EdgeInsets.only(bottom: 18.0),
          child: SelectableText(
            item,
            style: GoogleFonts.poppins(color: const Color(0xffbbbbbb)),
          ),
        ));
      } else {
        result.add(Padding(
          padding: const EdgeInsets.only(top: 8.0),
          child: SelectableText(
            item,
            style: GoogleFonts.poppins(color: const Color(0xffdddddd)),
          ),
        ));
      }
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: result,
    );
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        FocusManager.instance.primaryFocus?.nextFocus();
      },
      child: Scaffold(
        appBar: AppBar(
          foregroundColor: const Color(0xffdddddd),
          backgroundColor: Globals.black,
          title: Row(
            children: [
              const Icon(
                FontAwesomeIcons.robot,
                size: 40,
              ),
              if (false)
                CircleAvatar(
                  backgroundImage: NetworkImage(widget.chat.profilePic),
                ),
              const SizedBox(width: 10),
              const Text("Wise Melo"),
            ],
          ),
          actions: [
            PopupMenuButton(
              itemBuilder: (context) {
                return [
                  const PopupMenuItem(
                    child: Text("View contact"),
                  ),
                  const PopupMenuItem(
                    child: Text("Media, links, and docs"),
                  ),
                  const PopupMenuItem(
                    child: Text("Search"),
                  ),
                  const PopupMenuItem(
                    child: Text("Mute notifications"),
                  ),
                  const PopupMenuItem(
                    child: Text("Wallpaper"),
                  ),
                  const PopupMenuItem(
                    child: Text("More"),
                  ),
                ];
              },
            ),
          ],
          elevation: 0,
        ),
        backgroundColor: const Color(0xff172815),
        body: Column(
          children: [
            Expanded(
              child: ListView.builder(
                physics: const BouncingScrollPhysics(
                    parent: AlwaysScrollableScrollPhysics()),
                padding: const EdgeInsets.symmetric(vertical: 25),
                itemCount: messages.length,
                reverse: true,
                itemBuilder: (context, index) {
                  Message message = messages[messages.length - index - 1];
                  return message.isCurrentUser
                      ? _buildCurrentMessage(message)
                      : _buildReceivedMessage(message);
                },
              ),
            ),
            _buildMessageInput(),
          ],
        ),
      ),
    );
  }

  Widget _buildCurrentMessage(Message message) {
    final size = getSize(context);
    return SizedBox(
      width: size.width * .7,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Container(
            padding: const EdgeInsets.all(18),
            margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            decoration: BoxDecoration(
              color: Globals.black,
              borderRadius: BorderRadius.circular(10),
            ),
            child: Wrap(
              children: [
                Text(
                  message.content,
                  style: GoogleFonts.poppins(color: Color(0xffdddddd)),
                )
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(right: 18.0),
            child: Text(
              DateFormat.yMMMMEEEEd().format(message.sentAt),
              style: const TextStyle(
                  fontWeight: FontWeight.w300, color: Color(0xffaaaaaa)),
            ),
          )
        ],
      ),
    );
  }

  Widget _buildReceivedMessage(Message message) {
    final size = getSize(context);
    return SizedBox(
      width: size.width * .7,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Padding(
            padding: EdgeInsets.only(left: 18.0),
            child: Row(
              children: [
                Icon(
                  FontAwesomeIcons.robot,
                  color: Globals.primaryColor,
                ),
                Text(
                  "   Wise Man",
                  style: Globals.primaryText,
                )
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.all(18),
            margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            decoration: BoxDecoration(
              color: const Color(0xff1F2F16),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Wrap(
              children: [modText(message.content)],
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(left: 18.0),
            child: Text(
              DateFormat.yMEd().format(message.sentAt),
              style: const TextStyle(
                  fontWeight: FontWeight.w300, color: Color(0xffaaaaaa)),
            ),
          )
        ],
      ),
    );
  }

  Widget _buildMessageInput() {
    return Container(
      color: Globals.black,
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
      // color: const Color(0xff3E5622),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              maxLines: 3,
              minLines: 1,
              cursorColor: Globals.white,
              style: GoogleFonts.poppins(color: Colors.white),
              controller: _msgController,
              decoration: const InputDecoration(
                hintText: 'Type a message',
                hintStyle: TextStyle(
                    color: Color(0xffdddddd), fontWeight: FontWeight.w300),
                border: InputBorder.none,
              ),
            ),
          ),
          IconButton(
            onPressed: () {},
            icon: const Icon(Icons.attach_file, color: Colors.grey),
          ),
          if (_loading)
            const CircularProgressIndicator(
              color: Globals.white,
            )
          else
            FloatingActionButton.small(
              shape: const CircleBorder(),
              backgroundColor: Globals.black,
              foregroundColor: Globals.primaryColor,
              onPressed: generate,
              child: const Icon(FontAwesomeIcons.solidPaperPlane,
                  size: 16, color: Color(0xFFeeeeee)),
            ),
        ],
      ),
    );
  }
}

class Chat {
  final String name;
  final String profilePic;
  final List<Message> messages;

  Chat({
    required this.name,
    required this.profilePic,
    required this.messages,
  });
}

class Message {
  final DateTime sentAt;
  final bool isCurrentUser;
  final String content;

  Message({
    required this.isCurrentUser,
    required this.content,
    required this.sentAt,
  });
}
